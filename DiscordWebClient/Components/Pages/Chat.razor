@page "/chat"
@inject NavigationManager NavigationManager
@inject ChatService chatService;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net.Http.Headers
@using DiscordDomain.Models
@using Service
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject AuthenticationStateProvider AuthenticationStateProvider

<Modal @ref="modal" Title="Звонок">
    <BodyTemplate>
        @inputValue
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Danger" hidden="@IsGetCall" @onclick="UnTakeOffer">Отклонить</Button>
        <Button Color="ButtonColor.Success" hidden="@IsGetCall" @onclick="TakeOffer">Взять</Button>
    </FooterTemplate>
</Modal>

<AuthorizeView>
<Authorized>
    <section class="gradient-custom">
        <div class="container py-5">

            <div class="row">

                <div class="col-md-6 col-lg-5 col-xl-5 mb-4 mb-md-0">

                    <h5 class="font-weight-bold mb-3 text-center text-white">Member</h5>

                    <div class="card mask-custom">
                        <div class="card-body">
                        <div class="chat-container">
                            <ul class="list-unstyled mb-0">
                            @if(chats != null)
                            {
                                @foreach (var item in chats)
                                {
                                    <li class="p-2 border-bottom" style="border-bottom: 1px solid rgba(255,255,255,.3) !important;">
                                        <a class="d-flex justify-content-between link-light" @onclick="() => FocusChange(item)">
                                            <div class="d-flex flex-row">
                                                <img src="@item.PicturePath" alt="avatar"
                                                     class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                                <div class="pt-1">
                                                    <p class="fw-bold mb-0 text-dark" style="">@item.Name</p>
                                                    @if(item.Messages != null && item.Messages.Count > 0)
                                                    {
                                                        <p class="small text-dark">@item.Messages.Last().TextMessage</p>
                                                    }
                                                    else
                                                    {
                                                        <p class="small text-dark">Начните чат</p>
                                                    }
                                                </div>
                                            </div>
                                        </a>
                                    </li>
                                }
                            }
                            </ul>
                        </div>
                        </div>
                    </div>

                </div>

                <div class="col-md-6 col-lg-7 col-xl-7">
                @if (focusChat != null)
                {
                    <div class="d-flex flex-row justify-content-center align-items-center" style="margin-bottom: 50px;">
                        <img src="@focusChat.PicturePath" alt="avatar"
                             class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                        <div class="pt-1">
                            <p class="fw-bold mb-0 text-dark">@focusChat.Name</p>
                        </div>
                        <div class="pt-1">
                            <button type="button" class="alert-success" @onclick="() => GetCall(1)">
                                <img width="25" height="25" margin="25" src="PictureStorage/callPicture.png" />
                            </button>
                            <button type="button" class="alert-success" @onclick="() => GetCall(2)">>
                                <img width="25" height="25" margin="25" src="PictureStorage/videocall.jpg" />
                            </button>
                        </div>
                    </div>
                    <div class="chat-container">
                    <ul class="list-unstyled text-white">

                        @if (focusChat == null || focusChat.Messages == null || focusChat.Messages.Count == 0)
                        {
                            <div class="card-body" style="text-align: center;">
                                <p class="mb-5">
                                    Начните Общение
                                </p>
                            </div>
                        }
                        else
                        {
                            foreach (var message in focusChat.Messages)
                            {
                                if (message.UserId == userId)
                                {
                                    <li class="d-flex justify-content-start mb-4">
                                        <div class="card mask-custom">
                                            <div class="card-header d-flex justify-content-between p-3"
                                                 style="border-bottom: 1px solid rgba(255,255,255,.3);">
                                                <p class="fw-bold mb-0">Me</p>
                                                <p class="text-light small mb-0"><i class="far fa-clock"></i> @* 12 mins ago *@</p>
                                            </div>
                                            <div class="card-body">
                                                <p class="mb-0">
                                                    @message.TextMessage
                                                </p>
                                            </div>
                                        </div>
                                    </li>
                                }
                                else
                                {
                                    <li class="d-flex justify-content-end mb-4">
                                        <div class="card mask-custom">
                                            <div class="card-header d-flex justify-content-between p-3"
                                                 style="border-bottom: 1px solid rgba(255,255,255,.3);">
                                                <p class="fw-bold mb-0">@focusChat.Name</p>
                                                <p class="text-light small mb-0"><i class="far fa-clock"></i> @* 12 mins ago *@</p>
                                            </div>
                                            <div class="card-body">
                                                <p class="mb-0">
                                                    @message.TextMessage
                                                </p>
                                            </div>
                                        </div>
                                    </li>
                                }
                            }
                        }

                        <div class="flex-container">
                            <input type="search" class="form-control rounded" placeholder="" aria-label="Search" aria-describedby="search-addon" @bind=message/>
                            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-light btn-lg btn-rounded float-end" @onclick="@SendMessage">Send</button>
                        </div>
                    </ul>
                    </div>
                    }
                </div>

            </div>

        </div>
    </section>
</Authorized>
</AuthorizeView>


@code
{
    private bool IsAuthorized = false;
    private string token { get; set; }
    private List<ChatDto> chats { get; set; }
    private ChatDto focusChat { get; set; }
    private Guid userId { get; set; }
    private string message { get; set; }
    private HubConnection _connection;
    private Modal modal;
    private string inputValue;
    private Guid senderId;
    private bool IsGetCall = false;
    private int typeCall = 0;

    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var token = authState.User.FindFirst(ClaimTypes.Sid)?.Value;

        if (token == null)
        {
            return;
        }

        IsAuthorized = true;

        token = token.ToString();

        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var result = await httpClient.GetAsync("http://localhost:5237/api/Chat/GetAllMessage");
            var resultUser = await httpClient.GetAsync("http://localhost:5237/api/User/GetUserId");

            if (result.IsSuccessStatusCode)
            {
                chats = JsonConvert.DeserializeObject<List<ChatDto>>(await result.Content.ReadAsStringAsync())!;

                if (chats != null && chats.Count > 0)
                {
                    focusChat = chats.Last();
                }

                if (resultUser.IsSuccessStatusCode)
                {
                    userId = JsonConvert.DeserializeObject<Guid>(await resultUser.Content.ReadAsStringAsync())!;
                    StateHasChanged();
                    await GetHub();
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsAuthorized)
        {
            NavigationManager.NavigateTo("/auth");
            return;
        }

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("usrToken", out var newToken))
        {
            token = newToken.ToString();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void FocusChange(ChatDto chat)
    {
        focusChat = chat;
        StateHasChanged();
    }

    private async void SendMessage()
    {
        if (focusChat != null && !string.IsNullOrEmpty(message))
        {
            var hub = await GetHub();
            await hub.InvokeAsync("Send", message, userId, true, focusChat.RelationshipId);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void GetCall(int typeCall)
    {
        if(focusChat != null)
        {
            IsGetCall = true;
            inputValue = "Ожидание подключение";
            await _connection.InvokeAsync("OfferCall", focusChat.RelationshipId, userId, typeCall);
            await modal.ShowAsync();
            this.typeCall = typeCall;
        }
    }

    private async Task<HubConnection> GetHub()
    {
        if (_connection == null && userId != Guid.Empty)
        {
            _connection = chatService.GetHub(userId);
            var s = _connection.State;

            if (!chatService.Connects.ContainsKey(userId))
            {
                var id = userId;
                _connection.On<string, Guid, bool, Guid, HistoryMessage>("Receive", OnMessageReceived);
                _connection.On<Guid, Guid, int>("OfferCall", OnOfferCallReceived);
                _connection.On<string>("GetCall", OnGetCallReceived);
                _connection.On("UnTakeOffer", OnUnTakeOfferReceived);

                await chatService.StartHub(_connection, userId);
            }
        }

        return _connection;
    }

    private async Task OnMessageReceived(string message, Guid userSendId, bool isGroup, Guid chatId, HistoryMessage historyMessage)
    {
        try
        {
            var chat = chats.FirstOrDefault(_ => _.RelationshipId == chatId);
            var s = userId;

            if (chat != null)
            {
                if (chat.Messages != null)
                {
                    chat.Messages.Add(historyMessage);
                }
                else
                {
                    chat.Messages = new List<HistoryMessage>() { historyMessage };
                }

                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task OnOfferCallReceived(Guid senderId, Guid relationShipId, int typeCall)
    {
        this.senderId = senderId; 
        var name = chats.First(_ => _ != null && _.RelationshipId == relationShipId).Name;
        inputValue = typeCall == 1 ? $"Вам пришел аудизвонок с {name}" :  $"Вам пришел видеозвонок с {name}";
        await modal.ShowAsync();
        this.typeCall = typeCall;
    }

    private async Task OnUnTakeOfferReceived()
    {
        await modal.HideAsync();
        inputValue = "Клиент не принял звонок";
        await modal.ShowAsync();
    }

    private void OnGetCallReceived(string room)
    {
        NavigationManager.NavigateTo($"call/{room}?typeCall={typeCall}");
    }

    private async void UnTakeOffer()
    {
        await _connection.InvokeAsync("UnTakeOffer", senderId);
    }

    private async void TakeOffer()
    {
        var room = Guid.NewGuid().ToString();
        await _connection.InvokeAsync("TakeOffer", room, senderId, userId);
    }
}

<style>
    .gradient-custom {
        /* fallback for old browsers */
        background: #fccb90;
        /* Chrome 10-25, Safari 5.1-6 */
        background: -webkit-linear-gradient(to bottom right, rgba(252, 203, 144, 1), rgba(213, 126, 235, 1));
        /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
        background: linear-gradient(to bottom right, rgba(252, 203, 144, 1), rgba(213, 126, 235, 1))
    }
    .flex-container {
        display: flex;
        align-items: center;
    }
    .mask-custom {
        background: rgba(24, 24, 16, .2);
        border-radius: 2em;
        backdrop-filter: blur(15px);
        border: 2px solid rgba(255, 255, 255, 0.05);
        background-clip: padding-box;
        box-shadow: 10px 10px 10px rgba(46, 54, 68, 0.03);
    }

    .mask-custom-ьу {
        background: rgba(102, 178, 255, .2);
        border-radius: 2em;
        backdrop-filter: blur(15px);
        border: 2px solid rgba(255, 255, 255, 0.05);
        background-clip: padding-box;
        box-shadow: 10px 10px 10px rgba(46, 54, 68, 0.03);
    }

    .chat-container {
        max-height: 60vh;
        overflow-y: auto;
        padding-right: 10px;
    }
</style>
