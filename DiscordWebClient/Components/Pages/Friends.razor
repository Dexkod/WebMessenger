@page "/friends"
@using System.Net.Http.Headers
@using ApplicationDiscord.Dto.Relationship
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
<Authorized>
<div style="display: flex; justify-content: center; align-items: center;">
    <p>Поиск друзей</p>
</div>

<div class="input-group rounded" style="margin-bottom: 50px;">
    <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" @onchange="@ChangeSearchLogin"/>
    <span class="input-group-text border-0" id="search-addon">
        <i class="fas fa-search"></i>
    </span>
</div>

@if (friends != null)
{
    foreach(var friend in friends)
    {
        var color = friend.IsFriend ? "#32CD32" : "#8FBC8F";
        <section class="w-100 px-4 py-5" style="background-color: @color; border-radius: .5rem .5rem 0 0; margin-bottom: 10px;">
            <div class="row d-flex justify-content-center">
                <div class="col col-md-9 col-lg-7 col-xl-6">
                    <div class="card" style="border-radius: 15px;">
                        <div class="card-body p-4">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <img src="@string.Concat("/PictureStorage/", friend.PictureId.ToString(), ".jpg")"
                                         alt="Generic placeholder image" class="img-fluid" style="width: 180px; border-radius: 10px;">
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <h5 class="mb-1">@friend.LastName @friend.FirstName</h5>
                                    <div class="d-flex justify-content-start rounded-3 p-2 mb-2 bg-body-tertiary">
                                        <div>
                                            <p class="small text-muted mb-1">Login</p>
                                            <p class="mb-0">@friend.Login</p>
                                        </div>
                                        <div class="px-3">
                                            <p class="small text-muted mb-1">Status</p>
                                            <p class="mb-0">@friend.Status</p>
                                        </div>

                                    </div>
                                    <div class="d-flex pt-1">
                                        @if(friend.IsFriend){
                                            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-primary me-1 flex-grow-1">Chat</button>
                                            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary flex-grow-1" @onclick="() => RemoveFriend(friend)" style=" background-color: red;">Remove</button>
                                        }
                                        else
                                        {
                                            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-primary me-1 flex-grow-1">Chat</button>
                                            <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary flex-grow-1" @onclick="() => AddFriend(friend)">Add</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }
 }
 </Authorized>
</AuthorizeView>

@code {
    private bool IsAuthorized = false;
    private string token { get; set; }
    private List<InfoFriends> friends { get; set; }

    protected async override void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var token = authState.User.FindFirst(ClaimTypes.Sid)?.Value;

        if (token == null)
        {
            return;
        }

        this.token = token;
        IsAuthorized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsAuthorized)
        {
            NavigationManager.NavigateTo("/auth", false);
        }

        if(friends == null)
        {
            friends = new List<InfoFriends>();
            await GetFriends(null);
            await GetOtherPeople(null);
            friends = friends.OrderBy(_ => _.Login).ToList();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void ChangeSearchLogin(ChangeEventArgs arg)
    {
        string login = arg.Value.ToString();
        friends = new List<InfoFriends>();
        await GetFriends(login);
        await GetOtherPeople(login);
        friends = friends.OrderBy(_ => _.Login).ToList();
        StateHasChanged();
    }

    private async Task GetOtherPeople(string login)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var query = new Dictionary<string, string>();

            if (!string.IsNullOrEmpty(login))
            {
                query.Add("login", login);
            }

            var result = await httpClient.GetAsync(QueryHelpers.AddQueryString("http://localhost:5237/api/Relationship/GetOtherPeople", query));

            if (result.IsSuccessStatusCode)
            {
                var otherUser = JsonConvert.DeserializeObject<List<InfoFriends>>(await result.Content.ReadAsStringAsync());

                foreach (var user in otherUser)
                {
                    user.PicturePath = $"{user.PictureId}.jpg";
                    user.IsFriend = false;
                    friends.Add(user);
                }
            }
        }
    }

    private async Task GetFriends(string login)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var query = new Dictionary<string, string>();

            if (!string.IsNullOrEmpty(login))
            {
                query.Add("login", login);
            }

            var result = await httpClient.GetAsync(QueryHelpers.AddQueryString("http://localhost:5237/api/Relationship/GetFriends", query));

            if (result.IsSuccessStatusCode)
            {
                var friendsUser = JsonConvert.DeserializeObject<List<InfoFriends>>(await result.Content.ReadAsStringAsync());

                foreach (var friend in friendsUser)
                {
                    friend.PicturePath = $"{friend.PictureId}.jpg";
                    friend.IsFriend = true;
                    friends.Add(friend);
                }
            }
        }
    }

    private async void AddFriend(InfoFriends friend)
    {
        using(var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var body = JsonContent.Create(new AddFriendDto()
            {
                Id = friend.Id
            });

            var result = await httpClient.PostAsync("http://localhost:5237/api/Relationship/AddFriend", body);

            if (result.IsSuccessStatusCode)
            {
                friend.IsFriend = true;
                StateHasChanged();
            }
        }
    }

    private async void RemoveFriend(InfoFriends friend)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var body = JsonContent.Create(new AddFriendDto()
            {
                Id = friend.Id
            });

            var result = await httpClient.PostAsync("http://localhost:5237/api/Relationship/RemoveFriend", body);

            if (result.IsSuccessStatusCode)
            {
                friend.IsFriend = false;
                StateHasChanged();
            }
        }
    }
}