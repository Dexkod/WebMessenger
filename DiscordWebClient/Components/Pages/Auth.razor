@page "/auth"
@using DiscordWebClient.Components.Layout
@using DiscordWebClient.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@layout EmptyNavMenu
@attribute [AllowAnonymous]
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject TokenService TokenService
@inject AuthenticationStateProvider AuthStateProvider
@inject IConfiguration config


<AuthorizeView>
<NotAuthorized>
<section class="vh-100">
  <div class="container-fluid h-custom">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col-md-9 col-lg-6 col-xl-5">
        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
          class="img-fluid" alt="Sample image">
      </div>
      <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
        <form>
          <!-- Email input -->
          <div data-mdb-input-init class="form-outline mb-4">
            <input type="email" id="form3Example3" class="form-control form-control-lg"
              placeholder="Enter login" @bind-value="@Login" />
            <label class="form-label" for="form3Example3">Email address</label>
          </div>

          <!-- Password input -->
          <div data-mdb-input-init class="form-outline mb-3">
            <input type="password" id="form3Example4" class="form-control form-control-lg"
              placeholder="Enter password" @bind-value="@Password"/>
            <label class="form-label" for="form3Example4">Password</label>
          </div>
          
          <div class="form-group">
            <p style="text-align: center; color:red;" hidden="@IsRight">Неправильный логин или пароль</p>
          </div>

          <div class="d-flex justify-content-between align-items-center">
            <div class="form-check mb-0">
              <input class="form-check-input me-2" type="checkbox" value="" id="form2Example3" />
              <label class="form-check-label" for="form2Example3">
                Remember me
              </label>
            </div>
            <a href="/RecoveryPassword" class="text-body">Forgot password?</a>
          </div>

          <div class="text-center text-lg-start mt-4 pt-2">
            <button  type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg"
              style="padding-left: 2.5rem; padding-right: 2.5rem;" @onclick="LoginClick">Login</button>
            <p class="small fw-bold mt-2 pt-1 mb-0">Don't have an account? <a href="/Register"
                class="link-danger">Register</a></p>
          </div>

        </form>
      </div>
    </div>
  </div>
</section>
</NotAuthorized>
</AuthorizeView>

<style>
    .divider:after,
.divider:before {
content: "";
flex: 1;
height: 1px;
background: #eee;
}
.h-custom {
height: calc(100% - 73px);
}
</style>

@code {
    [Parameter]
    public string Login { get; set; } = "";

    [Parameter]
    public string Password { get; set; } = "";

    private bool IsRight { get; set; } = true;


    async void LoginClick()
    {
        using(var httpClient = new HttpClient())
        {
            var body = JsonContent.Create(new SignInUser()
            {
                Login = Login,
                Password = Password
            });

            var result = await httpClient.PostAsync($"{config["ServerApi:BaseUrl"]}/Authorization/SignIn", body);

            if (!result.IsSuccessStatusCode)
            {
                IsRight = false;
                return;
            }

            var token = JsonConvert.DeserializeObject<UserToken>(await result.Content.ReadAsStringAsync());

            await SignIn(token!.Token);
        }
    }

    private async Task SignIn(string tokenInput)
    {
        if (await TokenService.ValidateTokenAsync(tokenInput))
        {
            var userInfo = await TokenService.GetUserInfoAsync(tokenInput);

            await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userInfo);

            NavigationManager.NavigateTo("/", true);
        }
    }
}
