@page "/call/{id:Guid}"
@using DiscordWebClient.Service
@inject WebRtcService RtcService;
@inject IJSRuntime Js
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>WebRtc</PageTitle>


@if(typeCall == 2)
{
    <div class="container">
        <div class="row">
            <video class="col col-lg-6 p-0" id="localVideo" autoplay playsinline></video>
            <video class="col col-lg-6 p-0" id="remoteVideo" autoplay playsinline></video>
        </div>
    </div>
    <div class="py-4">
        <button type="button" class="btn btn-success" @onclick="CallAction" hidden="@_callDisabled">Присоединиться</button>
        <button type="button" class="btn btn-danger" @onclick="HangupAction" hidden="@_hangupDisabled">Отключиться</button>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <video hidden="true" class="col col-lg-6 p-0" id="localVideo" autoplay playsinline></video>
            <video hidden="true" class="col col-lg-6 p-0" id="remoteVideo" autoplay playsinline></video>
        </div>
        <div class="row">
            <img class="col col-lg-6 p-0" margin-right="50px" width="200" height="200" src="/PictureStorage/4205ab29-ffac-4df2-9b9a-b3a850f79c4d.jpg" />
            <img class="col col-lg-6 p-0" width="200" height="200" src="/PictureStorage/4205ab29-ffac-4df2-9b9a-b3a850f79c4d.jpg" />
        </div>
        <div class="py-4">
            <button type="button" class="btn btn-success" @onclick="CallAction" hidden="@_callDisabled">Присоединиться</button>
            <button type="button" class="btn btn-danger" @onclick="HangupAction" hidden="@_hangupDisabled">Отключиться</button>
        </div>
    </div>
}



@code {
    private IJSObjectReference? _module;
    private bool _startDisabled;
    private bool _callDisabled = false;
    private bool _hangupDisabled = true;
    [Parameter]
    [SupplyParameterFromQuery]
    public int typeCall { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>(
                "import", "/PictureStorage/js/Rtc.razor.js");
        }
        await base.OnAfterRenderAsync(firstRender);
        await StartAction();
    }

    private async Task StartAction()
    {
        if (string.IsNullOrWhiteSpace(Id)) return;
        if (_module == null) throw new InvalidOperationException();
        if (_startDisabled) return;
        _startDisabled = true;
        await RtcService.Join(Id, typeCall);
        var stream = await RtcService.StartLocalStream();

        await _module.InvokeVoidAsync("setLocalStream", stream);
        RtcService.OnRemoteStreamAcquired += RtcOnOnRemoteStreamAcquired;
        _callDisabled = true;
    }

    private async void RtcOnOnRemoteStreamAcquired(object? _, IJSObjectReference e)
    {
        if (_module == null) throw new InvalidOperationException();
        await _module.InvokeVoidAsync("setRemoteStream", e);
        _callDisabled = false;
        _hangupDisabled = false;
        _startDisabled = true;
        StateHasChanged();
    }

    private async Task CallAction()
    {
        if (!_callDisabled) return;
        _callDisabled = false;
        await RtcService.Call();
        _hangupDisabled = false;
    }
    private async Task HangupAction()
    {
        await RtcService.Hangup();
        _callDisabled = false;
        _hangupDisabled = true;
        _startDisabled = false;

        NavigationManager.NavigateTo("/chat");
    }
}